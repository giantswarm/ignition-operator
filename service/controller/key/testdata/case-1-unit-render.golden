10-change-cgroup.conf: |
  [Service]
  CPUAccounting=true
  MemoryAccounting=true
  Slice=kubereserved.slice
10-giantswarm-extra-args.conf: |
  [Service]
  CPUAccounting=true
  MemoryAccounting=true
  Slice=kubereserved.slice
  Environment="DOCKER_CGROUPS=--exec-opt native.cgroupdriver=cgroupfs --cgroup-parent=/kubereserved.slice --log-opt max-size=25m --log-opt max-file=2 --log-opt labels=io.kubernetes.container.hash,io.kubernetes.container.name,io.kubernetes.pod.name,io.kubernetes.pod.namespace,io.kubernetes.pod.uid"
  Environment="DOCKER_OPT_BIP=--bip=DockerDaemonCIDR"
  Environment="DOCKER_OPTS=--live-restore --icc=false --userland-proxy=false"
audit-rules.service: |
  [Service]
  ExecStartPre=/bin/bash -c "while [ ! -f /etc/audit/rules.d/10-docker.rules ]; do echo 'Waiting for /etc/audit/rules.d/10-docker.rules to be written' && sleep 1; done"
containerd.service: |
  [Service]
  CPUAccounting=true
  MemoryAccounting=true
  Slice=kubereserved.slice
debug-tools.service: |
  [Unit]
  Description=Install calicoctl and crictl tools
  After=network.target
  [Service]
  Type=oneshot
  ExecStart=/opt/install-debug-tools
  [Install]
  WantedBy=multi-user.target
etcd3-defragmentation.service: |
  [Unit]
  Description=etcd defragmentation job
  After=docker.service etcd3.service
  Requires=docker.service etcd3.service
  [Service]
  Type=oneshot
  EnvironmentFile=/etc/network-environment
  Environment=IMAGE=RegistryDomain/EtcdImage
  Environment=NAME=%p.service
  ExecStartPre=-/usr/bin/docker stop  $NAME
  ExecStartPre=-/usr/bin/docker rm  $NAME
  ExecStartPre=-/usr/bin/docker pull $IMAGE
  ExecStart=/usr/bin/docker run \
    -v /etc/kubernetes/ssl/etcd/:/etc/etcd \
    --net=host  \
    -e ETCDCTL_API=3 \
    --name $NAME \
    $IMAGE \
    etcdctl \
    --endpoints https://127.0.0.1:2379 \
    --cacert /etc/etcd/server-ca.pem \
    --cert /etc/etcd/server-crt.pem \
    --key /etc/etcd/server-key.pem \
    defrag \
    --command-timeout=60s \
    --dial-timeout=60s \
    --keepalive-timeout=25s
  [Install]
  WantedBy=multi-user.target
etcd3-defragmentation.timer: |
  [Unit]
  Description=Execute etcd3-defragmentation every day at 3.30AM UTC
  [Timer]
  OnCalendar=*-*-* 03:30:00 UTC
  [Install]
  WantedBy=multi-user.target
etcd3.service: |
  [Unit]
  Description=etcd3
  Wants=k8s-setup-network-env.service
  After=k8s-setup-network-env.service
  Conflicts=etcd.service etcd2.service
  StartLimitIntervalSec=0
  [Service]
  Restart=always
  RestartSec=0
  TimeoutStopSec=10
  LimitNOFILE=40000
  CPUAccounting=true
  MemoryAccounting=true
  Slice=kubereserved.slice
  Environment=IMAGE=RegistryDomain/EtcdImage
  Environment=NAME=%p.service
  EnvironmentFile=/etc/network-environment
  ExecStartPre=-/usr/bin/docker stop  $NAME
  ExecStartPre=-/usr/bin/docker rm  $NAME
  ExecStartPre=-/usr/bin/docker pull $IMAGE
  ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/etcd/server-ca.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/etcd/server-ca.pem to be written' && sleep 1; done"
  ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/etcd/server-crt.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/etcd/server-crt.pem to be written' && sleep 1; done"
  ExecStartPre=/bin/bash -c "while [ ! -f /etc/kubernetes/ssl/etcd/server-key.pem ]; do echo 'Waiting for /etc/kubernetes/ssl/etcd/server-key.pem to be written' && sleep 1; done"
  ExecStart=/usr/bin/docker run \
      -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt \
      -v /etc/kubernetes/ssl/etcd/:/etc/etcd \
      -v /var/lib/etcd/:/var/lib/etcd  \
      --net=host  \
      --name $NAME \
      $IMAGE \
      etcd \
      --name etcd0 \
      --trusted-ca-file /etc/etcd/server-ca.pem \
      --cert-file /etc/etcd/server-crt.pem \
      --key-file /etc/etcd/server-key.pem\
      --client-cert-auth=true \
      --peer-trusted-ca-file /etc/etcd/server-ca.pem \
      --peer-cert-file /etc/etcd/server-crt.pem \
      --peer-key-file /etc/etcd/server-key.pem \
      --peer-client-cert-auth=true \
      --advertise-client-urls=https://EtcdDomain:1234 \
      --initial-advertise-peer-urls=https://127.0.0.1:2380 \
      --listen-client-urls=https://0.0.0.0:2379 \
      --listen-peer-urls=https://${DEFAULT_IPV4}:2380 \
      --initial-cluster-token k8s-etcd-cluster \
      --initial-cluster etcd0=https://127.0.0.1:2380 \
      --initial-cluster-state new \
      --data-dir=/var/lib/etcd \
      --enable-v2
  [Install]
  WantedBy=multi-user.target
k8s-addons.service: |
  [Unit]
  Description=Kubernetes Addons
  Wants=k8s-kubelet.service k8s-setup-network-env.service
  After=k8s-kubelet.service k8s-setup-network-env.service
  [Service]
  Type=oneshot
  ExecStart=/opt/k8s-addons
  # https://github.com/kubernetes/kubernetes/issues/71078
  ExecStartPost=/usr/bin/systemctl restart k8s-kubelet.service
  [Install]
  WantedBy=multi-user.target
k8s-setup-download-hyperkube.service: |
  [Unit]
  Description=Pulls hyperkube binary from image to local FS
  After=docker.service
  Requires=docker.service
  [Service]
  Type=oneshot
  RemainAfterExit=yes
  TimeoutStartSec=0
  Environment="IMAGE=RegistryDomain/K8sImage"
  Environment="NAME=%p.service"
  ExecStartPre=/bin/bash -c "/usr/bin/docker create --name $NAME $IMAGE"
  ExecStart=/bin/bash -c "/usr/bin/docker cp $NAME:/hyperkube /opt/bin/hyperkube"
  ExecStartPost=/bin/bash -c "/usr/bin/docker rm $NAME"
  [Install]
  WantedBy=multi-user.target
k8s-setup-kubelet-config.service: |
  [Unit]
  Description=k8s-setup-kubelet-config Service
  After=k8s-setup-network-env.service docker.service
  Requires=k8s-setup-network-env.service docker.service
  [Service]
  Type=oneshot
  RemainAfterExit=yes
  TimeoutStartSec=0
  EnvironmentFile=/etc/network-environment
  ExecStart=/bin/bash -c '/usr/bin/envsubst </etc/kubernetes/config/kubelet.yaml.tmpl >/etc/kubernetes/config/kubelet.yaml'
  [Install]
  WantedBy=multi-user.target
k8s-setup-network-env.service: |
  [Unit]
  Description=k8s-setup-network-env Service
  Wants=network.target docker.service wait-for-domains.service
  After=network.target docker.service wait-for-domains.service
  [Service]
  Type=oneshot
  TimeoutStartSec=0
  Environment="IMAGE=DockerNetworkSetupImage"
  Environment="NAME=%p.service"
  ExecStartPre=/usr/bin/mkdir -p /opt/bin/
  ExecStartPre=/usr/bin/docker pull $IMAGE
  ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
  ExecStartPre=-/usr/bin/docker rm -f $NAME
  ExecStart=/usr/bin/docker run --rm --net=host -v /etc:/etc --name $NAME $IMAGE
  ExecStop=-/usr/bin/docker stop -t 10 $NAME
  ExecStopPost=-/usr/bin/docker rm -f $NAME
  [Install]
  WantedBy=multi-user.target
kubereserved.slice: |
  [Unit]
  Description=Limited resources slice for Kubernetes services
  Documentation=man:systemd.special(7)
  DefaultDependencies=no
  Before=slices.target
  Requires=-.slice
  After=-.slice
master-k8s-kubelet.service: |
  [Unit]
  Wants=k8s-setup-network-env.service k8s-setup-kubelet-config.service k8s-setup-download-hyperkube.service
  After=k8s-setup-network-env.service k8s-setup-kubelet-config.service k8s-setup-download-hyperkube.service
  Description=k8s-kubelet
  StartLimitIntervalSec=0
  [Service]
  TimeoutStartSec=300
  Restart=always
  RestartSec=0
  TimeoutStopSec=10
  Slice=kubereserved.slice
  CPUAccounting=true
  MemoryAccounting=true
  Environment="ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd/server-ca.pem"
  Environment="ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd/server-crt.pem"
  Environment="ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd/server-key.pem"
  EnvironmentFile=/etc/network-environment
  ExecStart=/opt/bin/hyperkube kubelet \
    kubeletArg1 \
    kubeletArg2 \
    --node-ip=${DEFAULT_IPV4} \
    --config=/etc/kubernetes/config/kubelet.yaml \
    --enable-server \
    --logtostderr=true \
    --cloud-provider=aws \
    --image-pull-progress-deadline=SomeProgressDeadline \
    --network-plugin=cni \
    --register-node=true \
    --register-with-taints=node-role.kubernetes.io/master=:NoSchedule \
    --kubeconfig=/etc/kubernetes/kubeconfig/kubelet.yaml \
    --node-labels="node.kubernetes.io/master,node-role.kubernetes.io/master,kubernetes.io/role=master,role=master,ip=${DEFAULT_IPV4},some=label" \
    --v=2
  [Install]
  WantedBy=multi-user.target
os-hardeing.service: |
  [Unit]
  Description=Apply os hardening
  [Service]
  Type=oneshot
  ExecStartPre=-/bin/bash -c "gpasswd -d core rkt; gpasswd -d core docker; gpasswd -d core wheel"
  ExecStartPre=/bin/bash -c "until [ -f '/etc/sysctl.d/hardening.conf' ]; do echo Waiting for sysctl file; sleep 1s;done;"
  ExecStart=/usr/sbin/sysctl -p /etc/sysctl.d/hardening.conf
  [Install]
  WantedBy=multi-user.target
set-certs-group-owner-permission-giantswarm.service: |
  [Unit]
  Description=Change group owner for certificates to giantswarm
  Wants=k8s-kubelet.service k8s-setup-network-env.service
  After=k8s-kubelet.service k8s-setup-network-env.service
  [Service]
  Type=oneshot
  ExecStart=/bin/sh -c "find /etc/kubernetes/ssl -name '*.pem' -print | xargs -i  sh -c 'chown root:giantswarm {} && chmod 640 {}'"
  [Install]
  WantedBy=multi-user.target
wait-for-domains.service: |
  [Unit]
  Description=Wait for etcd and k8s API domains to be available
  [Service]
  Type=oneshot
  ExecStart=/opt/wait-for-domains
  [Install]
  WantedBy=multi-user.target
worker-k8s-kubelet.service: |
  [Unit]
  Wants=k8s-setup-network-env.service k8s-setup-kubelet-config.service k8s-setup-download-hyperkube.service
  After=k8s-setup-network-env.service k8s-setup-kubelet-config.service k8s-setup-download-hyperkube.service
  Description=k8s-kubelet
  StartLimitIntervalSec=0
  [Service]
  TimeoutStartSec=300
  Restart=always
  RestartSec=0
  TimeoutStopSec=10
  Slice=kubereserved.slice
  CPUAccounting=true
  MemoryAccounting=true
  Environment="ETCD_CA_CERT_FILE=/etc/kubernetes/ssl/etcd/client-ca.pem"
  Environment="ETCD_CERT_FILE=/etc/kubernetes/ssl/etcd/client-crt.pem"
  Environment="ETCD_KEY_FILE=/etc/kubernetes/ssl/etcd/client-key.pem"
  EnvironmentFile=/etc/network-environment
  ExecStart=/opt/bin/hyperkube kubelet \
    kubeletArg1 \
    kubeletArg2 \
    --node-ip=${DEFAULT_IPV4} \
    --config=/etc/kubernetes/config/kubelet.yaml \
    --enable-server \
    --logtostderr=true \
    --cloud-provider=aws \
    --image-pull-progress-deadline=SomeProgressDeadline \
    --network-plugin=cni \
    --register-node=true \
    --kubeconfig=/etc/kubernetes/kubeconfig/kubelet.yaml \
    --node-labels="node.kubernetes.io/worker,node-role.kubernetes.io/worker,kubernetes.io/role=worker,role=worker,ip=${DEFAULT_IPV4},some=label" \
    --v=2
  [Install]
  WantedBy=multi-user.target
